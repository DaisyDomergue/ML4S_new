# Generated 2022-05-04 from:
# /mnt/c/Users/Gaia/Documents/Schoolwork/ML4S/ICNALE_SM_2.0_A/RNNLM.yaml
# yamllint disable
# ############################################################################
# Model: Language model with a recurrent neural network (RNNLM)
# Training: mini-librispeech transcripts
# Authors:  Ju-Chieh Chou 2020, Jianyuan Zhong 2021, Mirco Ravanelli 2021
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2602
__set_seed: !apply:torch.manual_seed [2602]
output_folder: results/RNNLM/
save_folder: results/RNNLM//save
train_log: results/RNNLM//train_log.txt

# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set lm_{train,valid,test}_data with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
lm_train_data: data/train.json
lm_valid_data: data/valid.json
lm_test_data: data/test.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: results/RNNLM//train_log.txt

# Tokenizer model (you must use the same tokenizer for LM and ASR training)
tokenizer_file: ./tokenizers/test.model

# Training parameters
number_of_epochs: 20
batch_size: 80
lr: 0.001
accu_steps: 1 # Gradient accumulation to simulate large batch training
ckpt_interval_minutes: 15 # save checkpoint every N min

# Dataloader options
train_dataloader_opts:
  batch_size: 80
  shuffle: true

valid_dataloader_opts:
  batch_size: 1

test_dataloader_opts:
  batch_size: 1

# Model parameters
emb_dim: 256 # dimension of the embeddings
rnn_size: 512 # dimension of hidden layers
layers: 2 # number of hidden layers

# Outputs
output_neurons: 1000 # index(blank/eos/bos) = 0
blank_index: 0
bos_index: 0
eos_index: 0


# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined..
model: &id001 !new:custom_model.CustomModel

# Tokenizer initialization
  embedding_dim: 256
  rnn_size: 512
  layers: 2


# Cost function used for training the model
compute_cost: !name:speechbrain.nnet.losses.nll_loss

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
optimizer: !name:torch.optim.Adam
  lr: 0.001
  betas: (0.9, 0.98)
  eps: 0.000000001

# This function manages learning rate annealing over the epochs.
# We here use the NewBoB algorithm, that anneals the learning rate if
# the improvements over two consecutive epochs is less than the defined
# threshold.
lr_annealing: &id002 !new:speechbrain.nnet.schedulers.NewBobScheduler
  initial_value: 0.001
  improvement_threshold: 0.0025
  annealing_factor: 0.8
  patient: 0


# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id003 !new:speechbrain.utils.epoch_loop.EpochCounter

# Pretrain the tokenizer
  limit: 20

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  model: *id001
tokenizer: &id004 !new:sentencepiece.SentencePieceProcessor

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: results/RNNLM//save
  recoverables:
    model: *id001
    scheduler: *id002
    counter: *id003
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  loadables:
    tokenizer: *id004
  paths:
    tokenizer: ./tokenizers/test.model
